<?php

namespace kulyk\yii\modules\novaposhta\console\controllers;

use Yii;
use yii\console\Controller;
use yii\helpers\Console;
use yii\helpers\Json;
use yii\console\Exception;
use yii\helpers\FileHelper;
use yii\helpers\VarDumper;
use kulyk\novaposhta\Novaposhta as NP;
use kulyk\yii\modules\novaposhta\models\City;
use kulyk\yii\modules\novaposhta\models\Warehouse;

class ManageController extends Controller
{
    public $poshta;

    public function init()
    {
        $this->poshta = new NP(['apiKey'=>'aceb1d852476f4a7fc87bfb8430d7360']);
        parent::init(); // TODO: Change the autogenerated stub
    }/**/

    public function actionIndex($message = 'hello world from module')
    {
        echo $message . "\n";
    }/**/

    public function actionUpdateCities(){
        $citiesModel = City::find()->all();
        $npCities = $this->poshta->getCities();
        $count = 0;
        $errors = [];
        if($citiesModel === Null || count($npCities) > count ($citiesModel)){
            foreach ($npCities as $city){
                $model =  City::find()->where(['CityID'=>$city['CityID']])->one();
                if ($model === null) {
                    $model = new City();
                }

                if(is_array($city['Conglomerates'])){
                    $city['Conglomerates'] = Json::encode($city['Conglomerates']); }
                $data['City'] = &$city;
                if($model->load($data)){
                    if ($model->save()){
                        $count++;
                    } else{
                        $errors[] = $model->getErrors();
                       VarDumper::dump( $city);
                    }
                } else{
                    VarDumper::dump($data) ;
                }
            }
        }
        echo "Населенных пунктов, где есть отделения Новой почты - ".count($npCities).PHP_EOL;
        echo "Населенных пунктов, где есть отделения Новой почты, в нашей БД - ".count($citiesModel).PHP_EOL;
        echo "Добавлено(обновлено) населенных пунктов, где есть отделения Новой почты - ".$count.PHP_EOL;
        if (count($errors)>0) {
            VarDumper::dump($errors);
        }

    }/**/

    public function actionUpdateWarehouses(){
        $warehauseModel = Warehouse::find()->all();
        $npWarehauses = $this->poshta->getWarehouses();
      //  VarDumper::dump($npWarehauses);die;
        $count = 0;
        $errors = [];
        if($warehauseModel === Null || count($npWarehauses) > count ($warehauseModel)){
            foreach ($npWarehauses as $warehause){
                $model =  Warehouse::find()->where(['SiteKey'=>$warehause['SiteKey']])->one();
                if ($model === null) {
                    $model = new Warehouse();
                }


                $data['Warehouse'] = &$warehause;
                if($model->load($data)){
                    if ($model->save()){
                        $count++;
                    } else{
                        $errors[] = $model->getErrors();
                        VarDumper::dump( $city);
                    }
                } else{
                    VarDumper::dump($data) ;
                }
            }
        }
        echo "Количество отделений Новой почты - ".count($npWarehauses).PHP_EOL;
        echo "Количество отделений Новой почты, в нашей БД - ".count($warehauseModel).PHP_EOL;
        echo "Добавлено(обновлено) отделений Новой почты - ".$count.PHP_EOL;
        if (count($errors)>0) {
            VarDumper::dump($errors);
        }

    }/**/

    
}/* end of Controller */
